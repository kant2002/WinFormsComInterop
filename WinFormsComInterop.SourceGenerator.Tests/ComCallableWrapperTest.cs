using Microsoft.CodeAnalysis;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Linq;

namespace WinFormsComInterop.SourceGenerator.Tests
{
    [TestClass]
    public class ComCallableWrapperTest : CodeGenerationTestBase
    {
        protected override SyntaxTree GetValidatedSyntaxTree(Compilation outputCompilation)
        {
            return outputCompilation.SyntaxTrees
                .First(_ => _.FilePath.Contains("Foo") && !_.FilePath.Contains("comwrappers"));
        }

        [TestMethod]
        public void DeclarationOfProxy()
        {
            string source = @"
namespace Foo
{
    using System.Threading;

    [InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
    public interface IStr
    {
        void Read(byte* pv, uint cb, uint* pcbRead);
    }

    [ComCallableWrapper(typeof(IStr))]
    partial class C
    {
    }
}";
            string output = this.GetGeneratedOutput(source, NullableContextOptions.Disable);

            Assert.IsNotNull(output);

            var expectedOutput = @"// <auto-generated>
// Code generated by COM Proxy Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>
#nullable enable
using ComInterfaceDispatch = System.Runtime.InteropServices.ComWrappers.ComInterfaceDispatch;
using Marshal = System.Runtime.InteropServices.Marshal;

namespace Foo
{
    [System.Runtime.Versioning.SupportedOSPlatform(""windows"")]
    unsafe partial class IStrProxy
    {
        [System.Runtime.InteropServices.UnmanagedCallersOnly]
        public static int Read(System.IntPtr thisPtr, byte* pv, uint cb, uint* pcbRead)
        {
            try
            {
                var inst = ComInterfaceDispatch.GetInstance<global::Foo.IStr>((ComInterfaceDispatch*)thisPtr);
                inst.Read(pv, cb, pcbRead);
            }
            catch (System.Exception __e)
            {
                return __e.HResult;
            }

            return 0; // S_OK;
        }
    }
}";
            Assert.AreEqual(expectedOutput, output);
        }

        [TestMethod]
        public void MethodWithoutParameters()
        {
            string source = @"
namespace Foo
{
    using System.Threading;

    [InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
    public interface ICloneable
    {
        void Clone();
    }

    [ComCallableWrapper(typeof(ICloneable))]
    partial class C
    {
    }
}";
            string output = this.GetGeneratedOutput(source, NullableContextOptions.Disable);

            Assert.IsNotNull(output);

            var expectedOutput = @"// <auto-generated>
// Code generated by COM Proxy Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>
#nullable enable
using ComInterfaceDispatch = System.Runtime.InteropServices.ComWrappers.ComInterfaceDispatch;
using Marshal = System.Runtime.InteropServices.Marshal;

namespace Foo
{
    [System.Runtime.Versioning.SupportedOSPlatform(""windows"")]
    unsafe partial class ICloneableProxy
    {
        [System.Runtime.InteropServices.UnmanagedCallersOnly]
        public static int Clone(System.IntPtr thisPtr)
        {
            try
            {
                var inst = ComInterfaceDispatch.GetInstance<global::Foo.ICloneable>((ComInterfaceDispatch*)thisPtr);
                inst.Clone();
            }
            catch (System.Exception __e)
            {
                return __e.HResult;
            }

            return 0; // S_OK;
        }
    }
}";
            Assert.AreEqual(expectedOutput, output);
        }

        [TestMethod]
        public void ExternIntefaceType()
        {
            string source = @"
extern alias drawing;
namespace Foo
{
    [ComCallableWrapper(typeof(drawing::ICloneable))]
    partial class C
    {
    }
}";
            string output = this.GetGeneratedOutput(source, NullableContextOptions.Disable);

            Assert.IsNotNull(output);

            var expectedOutput = @"// <auto-generated>
// Code generated by COM Proxy Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>
#nullable enable
extern alias drawing;
using ComInterfaceDispatch = System.Runtime.InteropServices.ComWrappers.ComInterfaceDispatch;
using Marshal = System.Runtime.InteropServices.Marshal;

namespace Foo
{
    [System.Runtime.Versioning.SupportedOSPlatform(""windows"")]
    unsafe partial class DrawingICloneableProxy
    {
        [System.Runtime.InteropServices.UnmanagedCallersOnly]
        public static int Clone(System.IntPtr thisPtr)
        {
            try
            {
                var inst = ComInterfaceDispatch.GetInstance<drawing::ICloneable>((ComInterfaceDispatch*)thisPtr);
                inst.Clone();
            }
            catch (System.Exception __e)
            {
                return __e.HResult;
            }

            return 0; // S_OK;
        }
    }
}";
            Assert.AreEqual(expectedOutput, output);
        }

        [TestMethod]
        public void EnumParameters()
        {
            string source = @"
namespace Foo
{
    using System.Threading;

    enum EnumValue {}

    [InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
    public interface IStr
    {
        void Read(byte* pv, EnumValue cb, uint* pcbRead);
    }

    [ComCallableWrapper(typeof(IStr))]
    partial class C
    {
    }
}";
            string output = this.GetGeneratedOutput(source, NullableContextOptions.Disable);

            Assert.IsNotNull(output);

            var expectedOutput = @"// <auto-generated>
// Code generated by COM Proxy Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>
#nullable enable
using ComInterfaceDispatch = System.Runtime.InteropServices.ComWrappers.ComInterfaceDispatch;
using Marshal = System.Runtime.InteropServices.Marshal;

namespace Foo
{
    [System.Runtime.Versioning.SupportedOSPlatform(""windows"")]
    unsafe partial class IStrProxy
    {
        [System.Runtime.InteropServices.UnmanagedCallersOnly]
        public static int Read(System.IntPtr thisPtr, byte* pv, int cb, uint* pcbRead)
        {
            try
            {
                var inst = ComInterfaceDispatch.GetInstance<global::Foo.IStr>((ComInterfaceDispatch*)thisPtr);
                inst.Read(pv, (global::Foo.EnumValue)cb, pcbRead);
            }
            catch (System.Exception __e)
            {
                return __e.HResult;
            }

            return 0; // S_OK;
        }
    }
}";
            Assert.AreEqual(expectedOutput, output);
        }

        [TestMethod]
        public void ComInterfaceParameter()
        {
            string source = @"
namespace Foo
{
    using System.Threading;

    enum EnumValue {}

    [InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
    public interface IStr
    {
        void CopyTo(IStr pstm, ulong cb);
    }

    [ComCallableWrapper(typeof(IStr))]
    partial class C
    {
    }
}";
            string output = this.GetGeneratedOutput(source, NullableContextOptions.Disable);

            Assert.IsNotNull(output);

            var expectedOutput = @"// <auto-generated>
// Code generated by COM Proxy Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>
#nullable enable
using ComInterfaceDispatch = System.Runtime.InteropServices.ComWrappers.ComInterfaceDispatch;
using Marshal = System.Runtime.InteropServices.Marshal;

namespace Foo
{
    [System.Runtime.Versioning.SupportedOSPlatform(""windows"")]
    unsafe partial class IStrProxy
    {
        [System.Runtime.InteropServices.UnmanagedCallersOnly]
        public static int CopyTo(System.IntPtr thisPtr, System.IntPtr pstm, ulong cb)
        {
            try
            {
                var inst = ComInterfaceDispatch.GetInstance<global::Foo.IStr>((ComInterfaceDispatch*)thisPtr);
                var local_0 = pstm == System.IntPtr.Zero ? null : (global::Foo.IStr)Marshal.GetObjectForIUnknown(pstm);
                inst.CopyTo(local_0, cb);
            }
            catch (System.Exception __e)
            {
                return __e.HResult;
            }

            return 0; // S_OK;
        }
    }
}";
            Assert.AreEqual(expectedOutput, output);
        }

        [TestMethod]
        public void ObjectParameter()
        {
            string source = @"
namespace Foo
{
    using System.Runtime.InteropServices;

    enum EnumValue {}

    [InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
    public interface IStr
    {
        void CopyTo([MarshalAs(UnmanagedType.Interface)]object data, ulong cb);
    }

    [ComCallableWrapper(typeof(IStr))]
    partial class C
    {
    }
}";
            string output = this.GetGeneratedOutput(source, NullableContextOptions.Disable);

            Assert.IsNotNull(output);

            var expectedOutput = @"// <auto-generated>
// Code generated by COM Proxy Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>
#nullable enable
using ComInterfaceDispatch = System.Runtime.InteropServices.ComWrappers.ComInterfaceDispatch;
using Marshal = System.Runtime.InteropServices.Marshal;

namespace Foo
{
    [System.Runtime.Versioning.SupportedOSPlatform(""windows"")]
    unsafe partial class IStrProxy
    {
        [System.Runtime.InteropServices.UnmanagedCallersOnly]
        public static int CopyTo(System.IntPtr thisPtr, System.IntPtr data, ulong cb)
        {
            try
            {
                var inst = ComInterfaceDispatch.GetInstance<global::Foo.IStr>((ComInterfaceDispatch*)thisPtr);
                var local_0 = data == System.IntPtr.Zero ? null : (object)Marshal.GetObjectForIUnknown(data);
                inst.CopyTo(local_0, cb);
            }
            catch (System.Exception __e)
            {
                return __e.HResult;
            }

            return 0; // S_OK;
        }
    }
}";
            Assert.AreEqual(expectedOutput, output);
        }

        [TestMethod]
        public void OutParameter()
        {
            string source = @"
namespace Foo
{
    using System.Threading;

    enum STATFLAG {}
    struct STATSTG { int Dummy; }

    [InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
    public interface IStr
    {
        void Stat(out STATSTG pstatstg, STATFLAG grfStatFlag);
    }

    [ComCallableWrapper(typeof(IStr))]
    partial class C
    {
    }
}";
            string output = this.GetGeneratedOutput(source, NullableContextOptions.Disable);

            Assert.IsNotNull(output);

            var expectedOutput = @"// <auto-generated>
// Code generated by COM Proxy Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>
#nullable enable
using ComInterfaceDispatch = System.Runtime.InteropServices.ComWrappers.ComInterfaceDispatch;
using Marshal = System.Runtime.InteropServices.Marshal;

namespace Foo
{
    [System.Runtime.Versioning.SupportedOSPlatform(""windows"")]
    unsafe partial class IStrProxy
    {
        [System.Runtime.InteropServices.UnmanagedCallersOnly]
        public static int Stat(System.IntPtr thisPtr, global::Foo.STATSTG* pstatstg, int grfStatFlag)
        {
            try
            {
                var inst = ComInterfaceDispatch.GetInstance<global::Foo.IStr>((ComInterfaceDispatch*)thisPtr);
                inst.Stat(out *pstatstg, (global::Foo.STATFLAG)grfStatFlag);
            }
            catch (System.Exception __e)
            {
                return __e.HResult;
            }

            return 0; // S_OK;
        }
    }
}";
            Assert.AreEqual(expectedOutput, output);
        }

        [TestMethod]
        public void RefParameter()
        {
            string source = @"
namespace Foo
{
    using System.Threading;

    enum STATFLAG {}
    struct STATSTG { int Dummy; }

    [InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
    public interface IStr
    {
        void Stat(ref STATSTG pstatstg, STATFLAG grfStatFlag);
    }

    [ComCallableWrapper(typeof(IStr))]
    partial class C
    {
    }
}";
            string output = this.GetGeneratedOutput(source, NullableContextOptions.Disable);

            Assert.IsNotNull(output);

            var expectedOutput = @"// <auto-generated>
// Code generated by COM Proxy Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>
#nullable enable
using ComInterfaceDispatch = System.Runtime.InteropServices.ComWrappers.ComInterfaceDispatch;
using Marshal = System.Runtime.InteropServices.Marshal;

namespace Foo
{
    [System.Runtime.Versioning.SupportedOSPlatform(""windows"")]
    unsafe partial class IStrProxy
    {
        [System.Runtime.InteropServices.UnmanagedCallersOnly]
        public static int Stat(System.IntPtr thisPtr, global::Foo.STATSTG* pstatstg, int grfStatFlag)
        {
            try
            {
                var inst = ComInterfaceDispatch.GetInstance<global::Foo.IStr>((ComInterfaceDispatch*)thisPtr);
                inst.Stat(ref *pstatstg, (global::Foo.STATFLAG)grfStatFlag);
            }
            catch (System.Exception __e)
            {
                return __e.HResult;
            }

            return 0; // S_OK;
        }
    }
}";
            Assert.AreEqual(expectedOutput, output);
        }

        [TestMethod]
        public void InParameter()
        {
            string source = @"
namespace Foo
{
    using System.Threading;

    enum STATFLAG {}
    struct STATSTG { int Dummy; }

    [InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
    public interface IStr
    {
        void Stat(in STATSTG pstatstg, STATFLAG grfStatFlag);
    }

    [ComCallableWrapper(typeof(IStr))]
    partial class C
    {
    }
}";
            string output = this.GetGeneratedOutput(source, NullableContextOptions.Disable);

            Assert.IsNotNull(output);

            var expectedOutput = @"// <auto-generated>
// Code generated by COM Proxy Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>
#nullable enable
using ComInterfaceDispatch = System.Runtime.InteropServices.ComWrappers.ComInterfaceDispatch;
using Marshal = System.Runtime.InteropServices.Marshal;

namespace Foo
{
    [System.Runtime.Versioning.SupportedOSPlatform(""windows"")]
    unsafe partial class IStrProxy
    {
        [System.Runtime.InteropServices.UnmanagedCallersOnly]
        public static int Stat(System.IntPtr thisPtr, global::Foo.STATSTG* pstatstg, int grfStatFlag)
        {
            try
            {
                var inst = ComInterfaceDispatch.GetInstance<global::Foo.IStr>((ComInterfaceDispatch*)thisPtr);
                inst.Stat(in *pstatstg, (global::Foo.STATFLAG)grfStatFlag);
            }
            catch (System.Exception __e)
            {
                return __e.HResult;
            }

            return 0; // S_OK;
        }
    }
}";
            Assert.AreEqual(expectedOutput, output);
        }

        [TestMethod]
        public void PreserveSig()
        {
            string source = @"
namespace Foo
{
    using System.Runtime.InteropServices;

    enum HRESULT: int {}

    [InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
    public interface IStr
    {
        [PreserveSig]
        HRESULT LockRegion(ulong libOffset);
    }

    [ComCallableWrapper(typeof(IStr))]
    partial class C
    {
    }
}";
            string output = this.GetGeneratedOutput(source, NullableContextOptions.Disable);

            Assert.IsNotNull(output);

            var expectedOutput = @"// <auto-generated>
// Code generated by COM Proxy Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>
#nullable enable
using ComInterfaceDispatch = System.Runtime.InteropServices.ComWrappers.ComInterfaceDispatch;
using Marshal = System.Runtime.InteropServices.Marshal;

namespace Foo
{
    [System.Runtime.Versioning.SupportedOSPlatform(""windows"")]
    unsafe partial class IStrProxy
    {
        [System.Runtime.InteropServices.UnmanagedCallersOnly]
        public static int LockRegion(System.IntPtr thisPtr, ulong libOffset)
        {
            try
            {
                var inst = ComInterfaceDispatch.GetInstance<global::Foo.IStr>((ComInterfaceDispatch*)thisPtr);
                return (int)inst.LockRegion(libOffset);
            }
            catch (System.Exception __e)
            {
                return __e.HResult;
            }
        }
    }
}";
            Assert.AreEqual(expectedOutput, output);
        }

        [TestMethod]
        public void PreserveSigVoid()
        {
            string source = @"
namespace Foo
{
    using System.Runtime.InteropServices;

    enum HRESULT: int {}

    [InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
    public interface IStr
    {
        [PreserveSig]
        void LockRegion(ulong libOffset);
    }

    [ComCallableWrapper(typeof(IStr))]
    partial class C
    {
    }
}";
            string output = this.GetGeneratedOutput(source, NullableContextOptions.Disable);

            Assert.IsNotNull(output);

            var expectedOutput = @"// <auto-generated>
// Code generated by COM Proxy Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>
#nullable enable
using ComInterfaceDispatch = System.Runtime.InteropServices.ComWrappers.ComInterfaceDispatch;
using Marshal = System.Runtime.InteropServices.Marshal;

namespace Foo
{
    [System.Runtime.Versioning.SupportedOSPlatform(""windows"")]
    unsafe partial class IStrProxy
    {
        [System.Runtime.InteropServices.UnmanagedCallersOnly]
        public static void LockRegion(System.IntPtr thisPtr, ulong libOffset)
        {
            try
            {
                var inst = ComInterfaceDispatch.GetInstance<global::Foo.IStr>((ComInterfaceDispatch*)thisPtr);
                inst.LockRegion(libOffset);
            }
            catch (System.Exception __e)
            {
                throw;
            }
        }
    }
}";
            Assert.AreEqual(expectedOutput, output);
        }

        [TestMethod]
        public void PreserveSigFloat()
        {
            string source = @"
namespace Foo
{
    using System.Runtime.InteropServices;

    enum HRESULT: int {}

    [InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
    public interface IStr
    {
        [PreserveSig]
        float LockRegion(ulong libOffset);
    }

    [ComCallableWrapper(typeof(IStr))]
    partial class C
    {
    }
}";
            string output = this.GetGeneratedOutput(source, NullableContextOptions.Disable);

            Assert.IsNotNull(output);

            var expectedOutput = @"// <auto-generated>
// Code generated by COM Proxy Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>
#nullable enable
using ComInterfaceDispatch = System.Runtime.InteropServices.ComWrappers.ComInterfaceDispatch;
using Marshal = System.Runtime.InteropServices.Marshal;

namespace Foo
{
    [System.Runtime.Versioning.SupportedOSPlatform(""windows"")]
    unsafe partial class IStrProxy
    {
        [System.Runtime.InteropServices.UnmanagedCallersOnly]
        public static float LockRegion(System.IntPtr thisPtr, ulong libOffset)
        {
            try
            {
                var inst = ComInterfaceDispatch.GetInstance<global::Foo.IStr>((ComInterfaceDispatch*)thisPtr);
                return (float)inst.LockRegion(libOffset);
            }
            catch (System.Exception __e)
            {
                return __e.HResult;
            }
        }
    }
}";
            Assert.AreEqual(expectedOutput, output);
        }

        [TestMethod]
        public void ReturnValue()
        {
            string source = @"
namespace Foo
{
    using System.Runtime.InteropServices;

    enum HRESULT {}

    [InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
    public interface IStr
    {
        [return: MarshalAs(UnmanagedType.IUnknown)]
        object Clone();
    }

    [ComCallableWrapper(typeof(IStr))]
    partial class C
    {
    }
}";
            string output = this.GetGeneratedOutput(source, NullableContextOptions.Disable);

            Assert.IsNotNull(output);

            var expectedOutput = @"// <auto-generated>
// Code generated by COM Proxy Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>
#nullable enable
using ComInterfaceDispatch = System.Runtime.InteropServices.ComWrappers.ComInterfaceDispatch;
using Marshal = System.Runtime.InteropServices.Marshal;

namespace Foo
{
    [System.Runtime.Versioning.SupportedOSPlatform(""windows"")]
    unsafe partial class IStrProxy
    {
        [System.Runtime.InteropServices.UnmanagedCallersOnly]
        public static int Clone(System.IntPtr thisPtr, System.IntPtr* retVal)
        {
            try
            {
                var inst = ComInterfaceDispatch.GetInstance<global::Foo.IStr>((ComInterfaceDispatch*)thisPtr);
                *retVal = global::Foo.MarshalSupport.GetIUnknownForObject(inst.Clone());
            }
            catch (System.Exception __e)
            {
                return __e.HResult;
            }

            return 0; // S_OK;
        }
    }
}";
            Assert.AreEqual(expectedOutput, output);
        }

        [TestMethod]
        public void ReturnInterfaceValue()
        {
            string source = @"
namespace Foo
{
    using System.Runtime.InteropServices;

    enum HRESULT {}

    [Guid(""D6DD68D1-86FD-4332-8666-9ABEDEA2D24C"")]
    [InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
    public interface IStr
    {
        IStr Clone();
    }

    [ComCallableWrapper(typeof(IStr))]
    partial class C
    {
    }
}";
            string output = this.GetGeneratedOutput(source, NullableContextOptions.Disable);

            Assert.IsNotNull(output);

            var expectedOutput = @"// <auto-generated>
// Code generated by COM Proxy Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>
#nullable enable
using ComInterfaceDispatch = System.Runtime.InteropServices.ComWrappers.ComInterfaceDispatch;
using Marshal = System.Runtime.InteropServices.Marshal;

namespace Foo
{
    [System.Runtime.Versioning.SupportedOSPlatform(""windows"")]
    unsafe partial class IStrProxy
    {
        [System.Runtime.InteropServices.UnmanagedCallersOnly]
        public static int Clone(System.IntPtr thisPtr, System.IntPtr* retVal)
        {
            try
            {
                var inst = ComInterfaceDispatch.GetInstance<global::Foo.IStr>((ComInterfaceDispatch*)thisPtr);
                var retValManaged = inst.Clone();
                if (retValManaged != null)
                {
                    var retValLocal = global::Foo.MarshalSupport.GetIUnknownForObject(retValManaged);
                    var targetInterface = new System.Guid(""D6DD68D1-86FD-4332-8666-9ABEDEA2D24C"");
                    try
                    {
                        var hrResult = Marshal.QueryInterface(retValLocal, ref targetInterface, out *retVal);
                        if (hrResult < 0)
                        {
                            Marshal.ThrowExceptionForHR(hrResult);
                        }
                    }
                    finally
                    {
                        Marshal.Release(retValLocal);
                    }
                }
                else
                {
                    *retVal = System.IntPtr.Zero;
                }
            }
            catch (System.Exception __e)
            {
                return __e.HResult;
            }

            return 0; // S_OK;
        }
    }
}";
            Assert.AreEqual(expectedOutput, output);
        }

        [TestMethod]
        public void GetProperty()
        {
            string source = @"
namespace Foo
{
    using System.Runtime.InteropServices;

    enum HRESULT {}

    [InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
    public interface IStr
    {
        
        object Parent { [return: MarshalAs(UnmanagedType.IUnknown)]get; }
    }

    [ComCallableWrapper(typeof(IStr))]
    partial class C
    {
    }
}";
            string output = this.GetGeneratedOutput(source, NullableContextOptions.Disable);

            Assert.IsNotNull(output);

            var expectedOutput = @"// <auto-generated>
// Code generated by COM Proxy Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>
#nullable enable
using ComInterfaceDispatch = System.Runtime.InteropServices.ComWrappers.ComInterfaceDispatch;
using Marshal = System.Runtime.InteropServices.Marshal;

namespace Foo
{
    [System.Runtime.Versioning.SupportedOSPlatform(""windows"")]
    unsafe partial class IStrProxy
    {
        [System.Runtime.InteropServices.UnmanagedCallersOnly]
        public static int get_Parent(System.IntPtr thisPtr, System.IntPtr* retVal)
        {
            try
            {
                var inst = ComInterfaceDispatch.GetInstance<global::Foo.IStr>((ComInterfaceDispatch*)thisPtr);
                *retVal = global::Foo.MarshalSupport.GetIUnknownForObject(inst.Parent);
            }
            catch (System.Exception __e)
            {
                return __e.HResult;
            }

            return 0; // S_OK;
        }
    }
}";
            Assert.AreEqual(expectedOutput, output);
        }

        [TestMethod]
        public void GetInterfaceProperty()
        {
            string source = @"
namespace Foo
{
    using System.Runtime.InteropServices;

    enum HRESULT {}

    [Guid(""22DD68D1-86FD-4332-8666-9ABEDEA2D24C"")]
    [InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
    public interface IStr
    {
        IStr Parent { get; }
    }

    [ComCallableWrapper(typeof(IStr))]
    partial class C
    {
    }
}";
            string output = this.GetGeneratedOutput(source, NullableContextOptions.Disable);

            Assert.IsNotNull(output);

            var expectedOutput = @"// <auto-generated>
// Code generated by COM Proxy Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>
#nullable enable
using ComInterfaceDispatch = System.Runtime.InteropServices.ComWrappers.ComInterfaceDispatch;
using Marshal = System.Runtime.InteropServices.Marshal;

namespace Foo
{
    [System.Runtime.Versioning.SupportedOSPlatform(""windows"")]
    unsafe partial class IStrProxy
    {
        [System.Runtime.InteropServices.UnmanagedCallersOnly]
        public static int get_Parent(System.IntPtr thisPtr, System.IntPtr* retVal)
        {
            try
            {
                var inst = ComInterfaceDispatch.GetInstance<global::Foo.IStr>((ComInterfaceDispatch*)thisPtr);
                var retValManaged = inst.Parent;
                if (retValManaged != null)
                {
                    var retValLocal = global::Foo.MarshalSupport.GetIUnknownForObject(retValManaged);
                    var targetInterface = new System.Guid(""22DD68D1-86FD-4332-8666-9ABEDEA2D24C"");
                    try
                    {
                        var hrResult = Marshal.QueryInterface(retValLocal, ref targetInterface, out *retVal);
                        if (hrResult < 0)
                        {
                            Marshal.ThrowExceptionForHR(hrResult);
                        }
                    }
                    finally
                    {
                        Marshal.Release(retValLocal);
                    }
                }
                else
                {
                    *retVal = System.IntPtr.Zero;
                }
            }
            catch (System.Exception __e)
            {
                return __e.HResult;
            }

            return 0; // S_OK;
        }
    }
}";
            Assert.AreEqual(expectedOutput, output);
        }

        [TestMethod]
        public void GetEnumProperty()
        {
            string source = @"
namespace Foo
{
    using System.Runtime.InteropServices;

    enum HRESULT {}

    [Guid(""22DD68D1-86FD-4332-8666-9ABEDEA2D24C"")]
    [InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
    public interface IStr
    {
        HRESULT Parent { get; }
    }

    [ComCallableWrapper(typeof(IStr))]
    partial class C
    {
    }
}";
            string output = this.GetGeneratedOutput(source, NullableContextOptions.Disable);

            Assert.IsNotNull(output);

            var expectedOutput = @"// <auto-generated>
// Code generated by COM Proxy Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>
#nullable enable
using ComInterfaceDispatch = System.Runtime.InteropServices.ComWrappers.ComInterfaceDispatch;
using Marshal = System.Runtime.InteropServices.Marshal;

namespace Foo
{
    [System.Runtime.Versioning.SupportedOSPlatform(""windows"")]
    unsafe partial class IStrProxy
    {
        [System.Runtime.InteropServices.UnmanagedCallersOnly]
        public static int get_Parent(System.IntPtr thisPtr, int* retVal)
        {
            try
            {
                var inst = ComInterfaceDispatch.GetInstance<global::Foo.IStr>((ComInterfaceDispatch*)thisPtr);
                *retVal = (int)inst.Parent;
            }
            catch (System.Exception __e)
            {
                return __e.HResult;
            }

            return 0; // S_OK;
        }
    }
}";
            Assert.AreEqual(expectedOutput, output);
        }

        [TestMethod]
        public void GetStringProperty()
        {
            string source = @"
namespace Foo
{
    using System.Runtime.InteropServices;

    enum HRESULT {}

    [Guid(""22DD68D1-86FD-4332-8666-9ABEDEA2D24C"")]
    [InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
    public interface IStr
    {
        string Parent { get; }
    }

    [ComCallableWrapper(typeof(IStr))]
    partial class C
    {
    }
}";
            string output = this.GetGeneratedOutput(source, NullableContextOptions.Disable);

            Assert.IsNotNull(output);

            var expectedOutput = @"// <auto-generated>
// Code generated by COM Proxy Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>
#nullable enable
using ComInterfaceDispatch = System.Runtime.InteropServices.ComWrappers.ComInterfaceDispatch;
using Marshal = System.Runtime.InteropServices.Marshal;

namespace Foo
{
    [System.Runtime.Versioning.SupportedOSPlatform(""windows"")]
    unsafe partial class IStrProxy
    {
        [System.Runtime.InteropServices.UnmanagedCallersOnly]
        public static int get_Parent(System.IntPtr thisPtr, System.IntPtr* retVal)
        {
            try
            {
                var inst = ComInterfaceDispatch.GetInstance<global::Foo.IStr>((ComInterfaceDispatch*)thisPtr);
                var retValManaged = inst.Parent;
                if (retValManaged != null)
                {
                    *retVal = Marshal.StringToCoTaskMemUni(retValManaged);
                }
                else
                {
                    *retVal = System.IntPtr.Zero;
                }
            }
            catch (System.Exception __e)
            {
                return __e.HResult;
            }

            return 0; // S_OK;
        }
    }
}";
            Assert.AreEqual(expectedOutput, output);
        }

        [TestMethod]
        public void SetStringProperty()
        {
            string source = @"
namespace Foo
{
    using System.Runtime.InteropServices;

    enum HRESULT {}

    [Guid(""22DD68D1-86FD-4332-8666-9ABEDEA2D24C"")]
    [InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
    public interface IStr
    {
        string Parent { get; set; }
    }

    [ComCallableWrapper(typeof(IStr))]
    partial class C
    {
    }
}";
            string output = this.GetGeneratedOutput(source, NullableContextOptions.Disable);

            Assert.IsNotNull(output);

            var expectedOutput = @"// <auto-generated>
// Code generated by COM Proxy Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>
#nullable enable
using ComInterfaceDispatch = System.Runtime.InteropServices.ComWrappers.ComInterfaceDispatch;
using Marshal = System.Runtime.InteropServices.Marshal;

namespace Foo
{
    [System.Runtime.Versioning.SupportedOSPlatform(""windows"")]
    unsafe partial class IStrProxy
    {
        [System.Runtime.InteropServices.UnmanagedCallersOnly]
        public static int get_Parent(System.IntPtr thisPtr, System.IntPtr* retVal)
        {
            try
            {
                var inst = ComInterfaceDispatch.GetInstance<global::Foo.IStr>((ComInterfaceDispatch*)thisPtr);
                var retValManaged = inst.Parent;
                if (retValManaged != null)
                {
                    *retVal = Marshal.StringToCoTaskMemUni(retValManaged);
                }
                else
                {
                    *retVal = System.IntPtr.Zero;
                }
            }
            catch (System.Exception __e)
            {
                return __e.HResult;
            }

            return 0; // S_OK;
        }
        [System.Runtime.InteropServices.UnmanagedCallersOnly]
        public static int set_Parent(System.IntPtr thisPtr, System.IntPtr value)
        {
            try
            {
                var inst = ComInterfaceDispatch.GetInstance<global::Foo.IStr>((ComInterfaceDispatch*)thisPtr);
                var local_0 = Marshal.PtrToStringUni(value);
                inst.Parent = local_0;
            }
            catch (System.Exception __e)
            {
                return __e.HResult;
            }

            return 0; // S_OK;
        }
    }
}";
            Assert.AreEqual(expectedOutput, output);
        }

        [TestMethod]
        public void StringParameters()
        {
            string source = @"
namespace Foo
{
    using System.Runtime.InteropServices;

    [InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
    public interface IStr
    {
        void Read(byte* pv, [MarshalAs(UnmanagedType.LPWStr)] string pwcsName, uint* pcbRead);
    }

    [ComCallableWrapper(typeof(IStr))]
    partial class C
    {
    }
}";
            string output = this.GetGeneratedOutput(source, NullableContextOptions.Disable);

            Assert.IsNotNull(output);

            var expectedOutput = @"// <auto-generated>
// Code generated by COM Proxy Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>
#nullable enable
using ComInterfaceDispatch = System.Runtime.InteropServices.ComWrappers.ComInterfaceDispatch;
using Marshal = System.Runtime.InteropServices.Marshal;

namespace Foo
{
    [System.Runtime.Versioning.SupportedOSPlatform(""windows"")]
    unsafe partial class IStrProxy
    {
        [System.Runtime.InteropServices.UnmanagedCallersOnly]
        public static int Read(System.IntPtr thisPtr, byte* pv, System.IntPtr pwcsName, uint* pcbRead)
        {
            try
            {
                var inst = ComInterfaceDispatch.GetInstance<global::Foo.IStr>((ComInterfaceDispatch*)thisPtr);
                var local_1 = Marshal.PtrToStringUni(pwcsName);
                inst.Read(pv, local_1, pcbRead);
            }
            catch (System.Exception __e)
            {
                return __e.HResult;
            }

            return 0; // S_OK;
        }
    }
}";
            Assert.AreEqual(expectedOutput, output);
        }

        [TestMethod]
        public void OutStringParameters()
        {
            string source = @"
namespace Foo
{
    using System.Runtime.InteropServices;

    [InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
    public interface IStr
    {
        void Read(byte* pv, [MarshalAs(UnmanagedType.LPWStr)] out string pwcsName, uint* pcbRead);
    }

    [ComCallableWrapper(typeof(IStr))]
    partial class C
    {
    }
}";
            string output = this.GetGeneratedOutput(source, NullableContextOptions.Disable);

            Assert.IsNotNull(output);

            var expectedOutput = @"// <auto-generated>
// Code generated by COM Proxy Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>
#nullable enable
using ComInterfaceDispatch = System.Runtime.InteropServices.ComWrappers.ComInterfaceDispatch;
using Marshal = System.Runtime.InteropServices.Marshal;

namespace Foo
{
    [System.Runtime.Versioning.SupportedOSPlatform(""windows"")]
    unsafe partial class IStrProxy
    {
        [System.Runtime.InteropServices.UnmanagedCallersOnly]
        public static int Read(System.IntPtr thisPtr, byte* pv, System.IntPtr* pwcsName, uint* pcbRead)
        {
            try
            {
                var inst = ComInterfaceDispatch.GetInstance<global::Foo.IStr>((ComInterfaceDispatch*)thisPtr);
                string local_1;
                inst.Read(pv, out local_1, pcbRead);
                *pwcsName = local_1 == null ? System.IntPtr.Zero : Marshal.StringToCoTaskMemUni(local_1);
            }
            catch (System.Exception __e)
            {
                return __e.HResult;
            }

            return 0; // S_OK;
        }
    }
}";
            Assert.AreEqual(expectedOutput, output);
        }

        [TestMethod]
        public void ExternIntefaceTypeWithPointer()
        {
            string source = @"
extern alias drawing;
namespace Foo
{
    [ComCallableWrapper(typeof(drawing::IPtrMethod))]
    partial class C
    {
    }
}";
            string output = this.GetGeneratedOutput(source, NullableContextOptions.Disable);

            Assert.IsNotNull(output);

            var expectedOutput = @"// <auto-generated>
// Code generated by COM Proxy Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>
#nullable enable
extern alias drawing;
using ComInterfaceDispatch = System.Runtime.InteropServices.ComWrappers.ComInterfaceDispatch;
using Marshal = System.Runtime.InteropServices.Marshal;

namespace Foo
{
    [System.Runtime.Versioning.SupportedOSPlatform(""windows"")]
    unsafe partial class DrawingIPtrMethodProxy
    {
        [System.Runtime.InteropServices.UnmanagedCallersOnly]
        public static int MethodPtr(System.IntPtr thisPtr, drawing::EnumValue* val)
        {
            try
            {
                var inst = ComInterfaceDispatch.GetInstance<drawing::IPtrMethod>((ComInterfaceDispatch*)thisPtr);
                inst.MethodPtr(val);
            }
            catch (System.Exception __e)
            {
                return __e.HResult;
            }

            return 0; // S_OK;
        }
    }
}";
            Assert.AreEqual(expectedOutput, output);
        }

        [TestMethod]
        public void BlittableArrayParameters()
        {
            string source = @"
namespace Foo
{
    using System.Runtime.InteropServices;

    [InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
    public interface IStr
    {
        void Read(int citems, System.Guid[] pIIDExclude, uint* pcbRead);
    }

    [ComCallableWrapper(typeof(IStr))]
    partial class C
    {
    }
}";
            string output = this.GetGeneratedOutput(source, NullableContextOptions.Disable);

            Assert.IsNotNull(output);

            var expectedOutput = @"// <auto-generated>
// Code generated by COM Proxy Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>
#nullable enable
using ComInterfaceDispatch = System.Runtime.InteropServices.ComWrappers.ComInterfaceDispatch;
using Marshal = System.Runtime.InteropServices.Marshal;

namespace Foo
{
    [System.Runtime.Versioning.SupportedOSPlatform(""windows"")]
    unsafe partial class IStrProxy
    {
        [System.Runtime.InteropServices.UnmanagedCallersOnly]
        public static int Read(System.IntPtr thisPtr, int citems, global::System.Guid* pIIDExclude, uint* pcbRead)
        {
            try
            {
                var inst = ComInterfaceDispatch.GetInstance<global::Foo.IStr>((ComInterfaceDispatch*)thisPtr);
                var local_1 = new System.Span<global::System.Guid>(pIIDExclude, (int)citems).ToArray();
                inst.Read(citems, local_1, pcbRead);
            }
            catch (System.Exception __e)
            {
                return __e.HResult;
            }

            return 0; // S_OK;
        }
    }
}";
            Assert.AreEqual(expectedOutput, output);
        }

        [TestMethod]
        public void BlittableArrayParameterWithIndex()
        {
            string source = @"
namespace Foo
{
    using System.Runtime.InteropServices;

    [InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
    public interface IStr
    {
        void Read([MarshalAs(UnmanagedType.LPArray, SizeParamIndex = 1)]byte[] pv, int cb);
    }

    [ComCallableWrapper(typeof(IStr))]
    partial class C
    {
    }
}";
            string output = this.GetGeneratedOutput(source, NullableContextOptions.Disable);

            Assert.IsNotNull(output);

            var expectedOutput = @"// <auto-generated>
// Code generated by COM Proxy Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>
#nullable enable
using ComInterfaceDispatch = System.Runtime.InteropServices.ComWrappers.ComInterfaceDispatch;
using Marshal = System.Runtime.InteropServices.Marshal;

namespace Foo
{
    [System.Runtime.Versioning.SupportedOSPlatform(""windows"")]
    unsafe partial class IStrProxy
    {
        [System.Runtime.InteropServices.UnmanagedCallersOnly]
        public static int Read(System.IntPtr thisPtr, byte* pv, int cb)
        {
            try
            {
                var inst = ComInterfaceDispatch.GetInstance<global::Foo.IStr>((ComInterfaceDispatch*)thisPtr);
                var local_0 = new System.Span<byte>(pv, (int)cb).ToArray();
                inst.Read(local_0, cb);
            }
            catch (System.Exception __e)
            {
                return __e.HResult;
            }

            return 0; // S_OK;
        }
    }
}";
            Assert.AreEqual(expectedOutput, output);
        }

        [TestMethod]
        public void NoBlittableArrayParameters()
        {
            string source = @"
namespace Foo
{
    using System.Runtime.InteropServices;

    [InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
    public interface IStr
    {
        void Read(byte* pv, string[] pIIDExclude, uint* pcbRead);
    }

    [ComCallableWrapper(typeof(IStr))]
    partial class C
    {
    }
}";
            string output = this.GetGeneratedOutput(source, NullableContextOptions.Disable);

            Assert.IsNotNull(output);

            var expectedOutput = @"// <auto-generated>
// Code generated by COM Proxy Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>
#nullable enable
using ComInterfaceDispatch = System.Runtime.InteropServices.ComWrappers.ComInterfaceDispatch;
using Marshal = System.Runtime.InteropServices.Marshal;

namespace Foo
{
    [System.Runtime.Versioning.SupportedOSPlatform(""windows"")]
    unsafe partial class IStrProxy
    {
        [System.Runtime.InteropServices.UnmanagedCallersOnly]
        public static int Read(System.IntPtr thisPtr, byte* pv, System.IntPtr* pIIDExclude, uint* pcbRead)
        {
            try
            {
                var inst = ComInterfaceDispatch.GetInstance<global::Foo.IStr>((ComInterfaceDispatch*)thisPtr);
                var local_1_length = 1;
                var local_1 = new string[local_1_length];
                for (int local_1_cnt = 0; local_1_cnt < local_1_length; local_1_cnt++)
                {
                    var arrayItem = pIIDExclude[local_1_cnt];
                    var local_1_0 = Marshal.PtrToStringUni(arrayItem);
                    local_1[local_1_cnt] = local_1_0;
                }

                inst.Read(pv, local_1, pcbRead);
            }
            catch (System.Exception __e)
            {
                return __e.HResult;
            }

            return 0; // S_OK;
        }
    }
}";
            Assert.AreEqual(expectedOutput, output);
        }

        [TestMethod]
        public void ComInterfaceOutParameter()
        {
            string source = @"
namespace Foo
{
    using System.Threading;

    enum EnumValue {}

    [InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
    public interface IStr
    {
        void CopyTo(out IStr pstm, ulong cb);
    }

    [ComCallableWrapper(typeof(IStr))]
    partial class C
    {
    }
}";
            string output = this.GetGeneratedOutput(source, NullableContextOptions.Disable);

            Assert.IsNotNull(output);

            var expectedOutput = @"// <auto-generated>
// Code generated by COM Proxy Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>
#nullable enable
using ComInterfaceDispatch = System.Runtime.InteropServices.ComWrappers.ComInterfaceDispatch;
using Marshal = System.Runtime.InteropServices.Marshal;

namespace Foo
{
    [System.Runtime.Versioning.SupportedOSPlatform(""windows"")]
    unsafe partial class IStrProxy
    {
        [System.Runtime.InteropServices.UnmanagedCallersOnly]
        public static int CopyTo(System.IntPtr thisPtr, System.IntPtr* pstm, ulong cb)
        {
            try
            {
                var inst = ComInterfaceDispatch.GetInstance<global::Foo.IStr>((ComInterfaceDispatch*)thisPtr);
                global::Foo.IStr local_0;
                inst.CopyTo(out local_0, cb);
                *pstm = local_0 == null ? System.IntPtr.Zero : global::Foo.MarshalSupport.GetIUnknownForObject(local_0);
            }
            catch (System.Exception __e)
            {
                return __e.HResult;
            }

            return 0; // S_OK;
        }
    }
}";
            Assert.AreEqual(expectedOutput, output);
        }

        [TestMethod]
        public void StructOutParameter()
        {
            string source = @"
namespace Foo
{
    using System.Threading;
    using System.Runtime.InteropServices;

    public enum EnumType
    {
    }

    public struct STATSTG
    {
        public object VariantValue;
        [MarshalAs(UnmanagedType.IUnknown)]
        public object UnknownValue;
        public EnumType EnumValue;
    }

    [InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
    public interface IStr
    {
        void CopyTo(out STATSTG pstm);
    }

    [ComCallableWrapper(typeof(IStr))]
    partial class C
    {
    }
}";
            string output = this.GetGeneratedOutput(source, NullableContextOptions.Disable);

            Assert.IsNotNull(output);

            var expectedOutput = @"// <auto-generated>
// Code generated by COM Proxy Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>
#nullable enable
using ComInterfaceDispatch = System.Runtime.InteropServices.ComWrappers.ComInterfaceDispatch;
using Marshal = System.Runtime.InteropServices.Marshal;

namespace Foo
{
    [System.Runtime.Versioning.SupportedOSPlatform(""windows"")]
    unsafe partial class IStrProxy
    {
        [System.Runtime.InteropServices.UnmanagedCallersOnly]
        public static int CopyTo(System.IntPtr thisPtr, STATSTG_native* pstm)
        {
            try
            {
                var inst = ComInterfaceDispatch.GetInstance<global::Foo.IStr>((ComInterfaceDispatch*)thisPtr);
                global::Foo.STATSTG local_0;
                inst.CopyTo(out local_0);
                var local_0_VariantValue = local_0.VariantValue;
                WinFormsComInterop.InteropServices.Variant local_0_0 = new WinFormsComInterop.InteropServices.Variant();
                Marshal.GetNativeVariantForObject(local_0_VariantValue, (System.IntPtr)(WinFormsComInterop.InteropServices.Variant*)&local_0_0);
                pstm->VariantValue = local_0_0;
                var local_0_UnknownValue = local_0.UnknownValue;
                var local_0_1 = local_0_UnknownValue == null ? System.IntPtr.Zero : global::Foo.MarshalSupport.GetIUnknownForObject(local_0_UnknownValue);
                pstm->UnknownValue = local_0_1;
                var local_0_EnumValue = local_0.EnumValue;
                int local_0_2;
                pstm->EnumValue = local_0_EnumValue;
            }
            catch (System.Exception __e)
            {
                return __e.HResult;
            }

            return 0; // S_OK;
        }
    }
}";
            Assert.AreEqual(expectedOutput, output);
        }

        [TestMethod]
        public void StructSTGMEDIUMOutParameter()
        {
            string source = @"
namespace Foo
{
    using System.Threading;
    using System.Runtime.InteropServices;

    [InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
    public interface IStr
    {
        void CopyTo(out System.Runtime.InteropServices.ComTypes.STGMEDIUM pstm);
    }

    [ComCallableWrapper(typeof(IStr))]
    partial class C
    {
    }
}";
            string output = this.GetGeneratedOutput(source, NullableContextOptions.Disable);

            Assert.IsNotNull(output);

            var expectedOutput = @"// <auto-generated>
// Code generated by COM Proxy Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>
#nullable enable
using ComInterfaceDispatch = System.Runtime.InteropServices.ComWrappers.ComInterfaceDispatch;
using Marshal = System.Runtime.InteropServices.Marshal;

namespace Foo
{
    [System.Runtime.Versioning.SupportedOSPlatform(""windows"")]
    unsafe partial class IStrProxy
    {
        [System.Runtime.InteropServices.UnmanagedCallersOnly]
        public static int CopyTo(System.IntPtr thisPtr, STGMEDIUM_native* pstm)
        {
            try
            {
                var inst = ComInterfaceDispatch.GetInstance<global::Foo.IStr>((ComInterfaceDispatch*)thisPtr);
                global::System.Runtime.InteropServices.ComTypes.STGMEDIUM local_0;
                inst.CopyTo(out local_0);
                var local_0_tymed = local_0.tymed;
                int local_0_0;
                pstm->tymed = local_0_tymed;
                var local_0_unionmember = local_0.unionmember;
                pstm->unionmember = local_0_unionmember;
                var local_0_pUnkForRelease = local_0.pUnkForRelease;
                var local_0_2 = local_0_pUnkForRelease == null ? System.IntPtr.Zero : global::Foo.MarshalSupport.GetIUnknownForObject(local_0_pUnkForRelease);
                pstm->pUnkForRelease = local_0_2;
            }
            catch (System.Exception __e)
            {
                return __e.HResult;
            }

            return 0; // S_OK;
        }
    }
}";
            Assert.AreEqual(expectedOutput, output);
        }

        [TestMethod]
        public void VariantOutParameter()
        {
            string source = @"
namespace Foo
{
    using System.Threading;

    enum EnumValue {}

    [InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
    public interface IStr
    {
        void CopyTo(out object pstm);
    }

    [ComCallableWrapper(typeof(IStr))]
    partial class C
    {
    }
}";
            string output = this.GetGeneratedOutput(source, NullableContextOptions.Disable);

            Assert.IsNotNull(output);

            var expectedOutput = @"// <auto-generated>
// Code generated by COM Proxy Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>
#nullable enable
using ComInterfaceDispatch = System.Runtime.InteropServices.ComWrappers.ComInterfaceDispatch;
using Marshal = System.Runtime.InteropServices.Marshal;

namespace Foo
{
    [System.Runtime.Versioning.SupportedOSPlatform(""windows"")]
    unsafe partial class IStrProxy
    {
        [System.Runtime.InteropServices.UnmanagedCallersOnly]
        public static int CopyTo(System.IntPtr thisPtr, WinFormsComInterop.InteropServices.Variant* pstm)
        {
            try
            {
                var inst = ComInterfaceDispatch.GetInstance<global::Foo.IStr>((ComInterfaceDispatch*)thisPtr);
                object local_0;
                inst.CopyTo(out local_0);
                Marshal.GetNativeVariantForObject(local_0, (System.IntPtr)pstm);
            }
            catch (System.Exception __e)
            {
                return __e.HResult;
            }

            return 0; // S_OK;
        }
    }
}";
            Assert.AreEqual(expectedOutput, output);
        }

        [TestMethod]
        public void VariantReturn()
        {
            string source = @"
namespace Foo
{
    using System.Threading;

    enum EnumValue {}

    [InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
    public interface IStr
    {
        object CopyTo();
    }

    [ComCallableWrapper(typeof(IStr))]
    partial class C
    {
    }
}";
            string output = this.GetGeneratedOutput(source, NullableContextOptions.Disable);

            Assert.IsNotNull(output);

            var expectedOutput = @"// <auto-generated>
// Code generated by COM Proxy Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>
#nullable enable
using ComInterfaceDispatch = System.Runtime.InteropServices.ComWrappers.ComInterfaceDispatch;
using Marshal = System.Runtime.InteropServices.Marshal;

namespace Foo
{
    [System.Runtime.Versioning.SupportedOSPlatform(""windows"")]
    unsafe partial class IStrProxy
    {
        [System.Runtime.InteropServices.UnmanagedCallersOnly]
        public static int CopyTo(System.IntPtr thisPtr, WinFormsComInterop.InteropServices.Variant* retVal)
        {
            try
            {
                var inst = ComInterfaceDispatch.GetInstance<global::Foo.IStr>((ComInterfaceDispatch*)thisPtr);
                object retValTemp = inst.CopyTo();
                Marshal.GetNativeVariantForObject(retValTemp, (System.IntPtr)retVal);
            }
            catch (System.Exception __e)
            {
                return __e.HResult;
            }

            return 0; // S_OK;
        }
    }
}";
            Assert.AreEqual(expectedOutput, output);
        }

        [TestMethod]
        public void Stream()
        {
            string source = @"
namespace Foo
{
    [ComCallableWrapper(typeof(System.Runtime.InteropServices.ComTypes.IStream))]
    partial class C
    {
    }
}";
            string output = this.GetGeneratedOutput(source, NullableContextOptions.Disable);

            Assert.IsNotNull(output);

            var expectedOutput = @"// <auto-generated>
// Code generated by COM Proxy Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>
#nullable enable
using ComInterfaceDispatch = System.Runtime.InteropServices.ComWrappers.ComInterfaceDispatch;
using Marshal = System.Runtime.InteropServices.Marshal;

namespace Foo
{
    [System.Runtime.Versioning.SupportedOSPlatform(""windows"")]
    unsafe partial class IStreamProxy
    {
        [System.Runtime.InteropServices.UnmanagedCallersOnly]
        public static int Read(System.IntPtr thisPtr, byte* pv, int cb, global::System.IntPtr pcbRead)
        {
            try
            {
                var inst = ComInterfaceDispatch.GetInstance<global::System.Runtime.InteropServices.ComTypes.IStream>((ComInterfaceDispatch*)thisPtr);
                var local_0 = new System.Span<byte>(pv, (int)cb).ToArray();
                inst.Read(local_0, cb, pcbRead);
            }
            catch (System.Exception __e)
            {
                return __e.HResult;
            }

            return 0; // S_OK;
        }
        [System.Runtime.InteropServices.UnmanagedCallersOnly]
        public static int Write(System.IntPtr thisPtr, byte* pv, int cb, global::System.IntPtr pcbWritten)
        {
            try
            {
                var inst = ComInterfaceDispatch.GetInstance<global::System.Runtime.InteropServices.ComTypes.IStream>((ComInterfaceDispatch*)thisPtr);
                var local_0 = new System.Span<byte>(pv, (int)cb).ToArray();
                inst.Write(local_0, cb, pcbWritten);
            }
            catch (System.Exception __e)
            {
                return __e.HResult;
            }

            return 0; // S_OK;
        }
        [System.Runtime.InteropServices.UnmanagedCallersOnly]
        public static int Seek(System.IntPtr thisPtr, long dlibMove, int dwOrigin, global::System.IntPtr plibNewPosition)
        {
            try
            {
                var inst = ComInterfaceDispatch.GetInstance<global::System.Runtime.InteropServices.ComTypes.IStream>((ComInterfaceDispatch*)thisPtr);
                inst.Seek(dlibMove, dwOrigin, plibNewPosition);
            }
            catch (System.Exception __e)
            {
                return __e.HResult;
            }

            return 0; // S_OK;
        }
        [System.Runtime.InteropServices.UnmanagedCallersOnly]
        public static int SetSize(System.IntPtr thisPtr, long libNewSize)
        {
            try
            {
                var inst = ComInterfaceDispatch.GetInstance<global::System.Runtime.InteropServices.ComTypes.IStream>((ComInterfaceDispatch*)thisPtr);
                inst.SetSize(libNewSize);
            }
            catch (System.Exception __e)
            {
                return __e.HResult;
            }

            return 0; // S_OK;
        }
        [System.Runtime.InteropServices.UnmanagedCallersOnly]
        public static int CopyTo(System.IntPtr thisPtr, System.IntPtr pstm, long cb, global::System.IntPtr pcbRead, global::System.IntPtr pcbWritten)
        {
            try
            {
                var inst = ComInterfaceDispatch.GetInstance<global::System.Runtime.InteropServices.ComTypes.IStream>((ComInterfaceDispatch*)thisPtr);
                var local_0 = pstm == System.IntPtr.Zero ? null : (global::System.Runtime.InteropServices.ComTypes.IStream)Marshal.GetObjectForIUnknown(pstm);
                inst.CopyTo(local_0, cb, pcbRead, pcbWritten);
            }
            catch (System.Exception __e)
            {
                return __e.HResult;
            }

            return 0; // S_OK;
        }
        [System.Runtime.InteropServices.UnmanagedCallersOnly]
        public static int Commit(System.IntPtr thisPtr, int grfCommitFlags)
        {
            try
            {
                var inst = ComInterfaceDispatch.GetInstance<global::System.Runtime.InteropServices.ComTypes.IStream>((ComInterfaceDispatch*)thisPtr);
                inst.Commit(grfCommitFlags);
            }
            catch (System.Exception __e)
            {
                return __e.HResult;
            }

            return 0; // S_OK;
        }
        [System.Runtime.InteropServices.UnmanagedCallersOnly]
        public static int Revert(System.IntPtr thisPtr)
        {
            try
            {
                var inst = ComInterfaceDispatch.GetInstance<global::System.Runtime.InteropServices.ComTypes.IStream>((ComInterfaceDispatch*)thisPtr);
                inst.Revert();
            }
            catch (System.Exception __e)
            {
                return __e.HResult;
            }

            return 0; // S_OK;
        }
        [System.Runtime.InteropServices.UnmanagedCallersOnly]
        public static int LockRegion(System.IntPtr thisPtr, long libOffset, long cb, int dwLockType)
        {
            try
            {
                var inst = ComInterfaceDispatch.GetInstance<global::System.Runtime.InteropServices.ComTypes.IStream>((ComInterfaceDispatch*)thisPtr);
                inst.LockRegion(libOffset, cb, dwLockType);
            }
            catch (System.Exception __e)
            {
                return __e.HResult;
            }

            return 0; // S_OK;
        }
        [System.Runtime.InteropServices.UnmanagedCallersOnly]
        public static int UnlockRegion(System.IntPtr thisPtr, long libOffset, long cb, int dwLockType)
        {
            try
            {
                var inst = ComInterfaceDispatch.GetInstance<global::System.Runtime.InteropServices.ComTypes.IStream>((ComInterfaceDispatch*)thisPtr);
                inst.UnlockRegion(libOffset, cb, dwLockType);
            }
            catch (System.Exception __e)
            {
                return __e.HResult;
            }

            return 0; // S_OK;
        }
        [System.Runtime.InteropServices.UnmanagedCallersOnly]
        public static int Stat(System.IntPtr thisPtr, STATSTG_native* pstatstg, int grfStatFlag)
        {
            try
            {
                var inst = ComInterfaceDispatch.GetInstance<global::System.Runtime.InteropServices.ComTypes.IStream>((ComInterfaceDispatch*)thisPtr);
                global::System.Runtime.InteropServices.ComTypes.STATSTG local_0;
                inst.Stat(out local_0, grfStatFlag);
                var local_0_pwcsName = local_0.pwcsName;
                var local_0_0 = Marshal.StringToCoTaskMemUni(local_0_pwcsName);
                pstatstg->pwcsName = local_0_0;
                var local_0_type = local_0.type;
                pstatstg->type = local_0_type;
                var local_0_cbSize = local_0.cbSize;
                pstatstg->cbSize = local_0_cbSize;
                var local_0_mtime = local_0.mtime;
                pstatstg->mtime = local_0_mtime;
                var local_0_ctime = local_0.ctime;
                pstatstg->ctime = local_0_ctime;
                var local_0_atime = local_0.atime;
                pstatstg->atime = local_0_atime;
                var local_0_grfMode = local_0.grfMode;
                pstatstg->grfMode = local_0_grfMode;
                var local_0_grfLocksSupported = local_0.grfLocksSupported;
                pstatstg->grfLocksSupported = local_0_grfLocksSupported;
                var local_0_clsid = local_0.clsid;
                pstatstg->clsid = local_0_clsid;
                var local_0_grfStateBits = local_0.grfStateBits;
                pstatstg->grfStateBits = local_0_grfStateBits;
                var local_0_reserved = local_0.reserved;
                pstatstg->reserved = local_0_reserved;
            }
            catch (System.Exception __e)
            {
                return __e.HResult;
            }

            return 0; // S_OK;
        }
        [System.Runtime.InteropServices.UnmanagedCallersOnly]
        public static int Clone(System.IntPtr thisPtr, System.IntPtr* ppstm)
        {
            try
            {
                var inst = ComInterfaceDispatch.GetInstance<global::System.Runtime.InteropServices.ComTypes.IStream>((ComInterfaceDispatch*)thisPtr);
                global::System.Runtime.InteropServices.ComTypes.IStream local_0;
                inst.Clone(out local_0);
                *ppstm = local_0 == null ? System.IntPtr.Zero : global::Foo.MarshalSupport.GetIUnknownForObject(local_0);
            }
            catch (System.Exception __e)
            {
                return __e.HResult;
            }

            return 0; // S_OK;
        }
    }
}";
            Assert.AreEqual(expectedOutput, output);
        }
    }
}
